===================
Trafo
===================

Class Overview
==============

Trafos allow flexible use of arbitrary metric simulation spaces.
The three coordinates of the metric simulation space are assumed to be stored in the
:c:type:`mrc_crds` object of the associated :c:type:`mrc_domain`. The
trafo contains the mapping of the each point in the simulation domain
back to Cartesian space. To aid in computation the trafo also defines
several other properties of the metric simulation space across the
grid such as the Jacobian of the mapping and metric tensor. Because
the simulation space can be non-orthonormal every quantity generated by the trafo is an 
:c:type:`mrc_fld` with 3 spatial dimensions defined at each point on
the grid. The number of components will vary by the rank of the quantity.

.. warning:: Right now all trafo fields of type `double_aos`!


Types
-----

.. c:type:: mrc_trafo_cartesian

  *Name*: "cartesian"

  *Simulation Coordinates*: :math:`x, y, z`

  *Mapping*
  
     * :math:`x = x`
     
     * :math:`y = y`
      
     * :math:`z = z`
  
  *Block Factory*: :c:type:`"simple2d" <mrc_block_factory_simple2d>`

    .. note:: This should also be compatible with the :c:type:`"simple3d" <mrc_block_factory_simple3d>`
		 factory, but it hasn't been tested in a while.

.. c:type:: mrc_trafo_cylindrical

  *Name*: "cylindrical"

  *Simulation Coordinates*: :math:`r, \theta, z`

  *Mapping*
  
     * :math:`x = r \cos (\theta)`
     
     * :math:`y = r \sin (\theta)`
      
     * :math:`z = z`

  *Block Factory*: :c:type:`"cylindrical" <mrc_block_factory_cylindrical>`


Relationships
-------------
* :c:type:`mrc_domain` 

  An :c:type:`mrc_trafo` must have a domain assigned before it can be
  set up. Currently the domain must be of type
  :c:type:`mrc_domain_mb`, though this isn't strictly needed for all
  trafos.

* :c:type:`mrc_block_factory`

  Trafos may suggest specific block factories to be used in setting up
  the :c:type:`multi-block <mrc_domain_mb>` domains. These are only
  suggestions, and may be overridden by users setting the parameter
  `block_factory` in the domain. The :c:type:`cartesian
  <mrc_trafo_cartesian>` trafo, for example, suggests
  :c:type:`simple2d <mrc_block_factory_simple2d>` but the user may
  choose the :c:type:`simple3d <mrc_block_factory_simple3d>` type,
  which should work just as well.

User Interface
====================

.. c:type:: struct mrc_trafo

   Defines a metric coordinate space.
   
   :parameter param_obj domain: 
      The domain on which this trafo lives.

   :members:

     .. c:member:: param_obj cc0

        Scalar field: 3 spatial + 1 patch dimensions containing the 
        Cartesian :math:`x` component on the grid. [1 Comp. :c:type:`mrc_fld*`] 
      
     .. c:member:: param_obj cc1

        Scalar field: 3 spatial + 1 patch dimensions containing the
        Cartesian :math:`y` component on the grid. [1 Comp. :c:type:`mrc_fld*`] 

     .. c:member:: param_obj cc2

        Scalar field: 3 spatial + 1 patch dimensions containing the
        Cartesian :math:`z` component on the grid. [1 Comp. :c:type:`mrc_fld*`] 

     .. c:member:: param_obj jac

        Scalar field: 3 spatial + 1 patch dimensions containing the
        discretized Jacobian of the transformation from Cartesian
	space. [1 Comp. :c:type:`mrc_fld*`] 

     .. c:member:: param_obj eu

        Compound of 3 vector fields (9 components total): 3 spatial + 1 patch dimensions containing
        the simulation space normal basis vectors. [9 Comp. :c:type:`mrc_fld*`] 

     .. c:member:: param_obj el

        Compound of 3 vector fields (9 components total): 3 spatial + 1 patch dimensions containing
        the simulation space tangential basis vectors. [9 Comp. :c:type:`mrc_fld*`] 

     .. c::member:: param_obj guu

        Rank 2 tensor field: 3 spatial + 1 patch dimensions containing
        an upper index version of the metric tensor. [27 Comp. :c:type:`mrc_fld*`] 

     .. c:member:: param_obj gll

        Rank 2 tensor field: 3 spatial + 1 patch dimensions containing
        a lower index version of the metric tensor. [27 Comp. :c:type:`mrc_fld*`] 

     .. c:member:: param_obj gam

        3 index (27 component) field: 3 spatial + 1 patch dimensions containing
        the Christoffel symbol of the second kind across the grid. [27 Comp. :c:type:`mrc_fld*`] 


The following macros are defined to make accessing the trafo members
easier:

.. c:function:: double TRAFO_CRD0(struct mrc_trafo *trafo, int j0, int j1, int j2, int patch)

   :return: :math:`x` at :math:`(j_{0}, j_{1}, j_{2})`

.. c:function:: double TRAFO_CRD1(struct mrc_trafo *trafo, int j0, int j1, int j2, int patch)

   :return: :math:`y` at :math:`(j_{0}, j_{1}, j_{2})`

.. c:function:: double TRAFO_CRD2(struct mrc_trafo *trafo, int j0, int j1, int j2, int patch)

   :return: :math:`z` at :math:`(j_{0}, j_{1}, j_{2})`

.. c:function:: double TRAFO_JAC(struct mrc_trafo *trafo, int j0, int j1, int j2, int patch)

   :return: :math:`J` at :math:`(j_{0}, j_{1}, j_{2})`

.. c:function:: double TRAFO_EU(struct mrc_trafo *trafo, int i, int j, int j0, int j1, int j2, int patch)

   :return: :math:`\vec{i}^{j}` at :math:`(j_{0}, j_{1}, j_{2})`

.. c:function:: double TRAFO_EL(struct mrc_trafo *trafo, int i, int j, int j0, int j1, int j2, int patch)

   :return: :math:`\underline{i}_{j}` at :math:`(j_{0}, j_{1}, j_{2})`

.. c:function:: double TRAFO_GUU(struct mrc_trafo *trafo, int i, int j, int j0, int j1, int j2, int patch)

   :return: :math:`g^{ij}` at :math:`(j_{0}, j_{1}, j_{2})`

.. c:function:: double TRAFO_GLL(struct mrc_trafo *trafo, int i, int j, int j0, int j1, int j2, int patch)

   :return: :math:`g_{ij}` at :math:`(j_{0}, j_{1}, j_{2})`

.. c:function:: double TRAFO_GAM(struct mrc_trafo *trafo, int i, int j, int k, int j0, int j1, int j2, int patch)

   :return: :math:`\Gamma^{i}_{jk}` at :math:`(j_{0}, j_{1}, j_{2})`


Writing A Subclass
========================

Required Elements
-----------------

.. c:function:: void calcCRD(struct mrc_trafo *trafo, int block, const double xi[3], double xx[3])

   Maps the simulation coordinates (in the metric space) to Cartesian coordinates.

   :param struct mrc_trafo* trafo: This trafo.

   :param int block: 
      Which block we are setting up. Trafos can have different mappings on each block of a domain.
      The author is responsible for ensuring the mappings are smooth across block boundaries.

   :param const double xi[3]: The simulation coordinates at a grid point.
			      
   :param double xx[3]: The returned Cartesian coordinates of the grid point as calculated by
			this function.

Optional Elements
-----------------

The author may specify analytic expressions to calculate the remaining
members of the trafo. If these elements are not provided the trafo
super-class will calculate from the coordinate mapping using
finite difference approximations.

.. warning:: Analytic expressions are recommended, as the finite difference
	     approximation from coordinates hasn't been tested in a while.

.. note:: The metric tensor is defined by products of the simulation
	  space basis vectors and thus there is no option to provide
	  an analytic expression.

.. c:function:: void calcJAC(struct mrc_trafo *trafo, int block, const double xi[3], double *pJ)

   Calculates the Jacobian of the mapping from Cartesian to simulation
   space.

   :param struct mrc_trafo* trafo: This trafo.

   :param int block:
      Which block we are setting up. Trafos can have different mappings on each block of a domain.
      The author is responsible for ensuring the mappings are smooth across block boundaries.

   :param const double xi[3]: The simulation coordinates at a grid
			      point.

   :param double* pJ: The output pointer for the Jacobian calculated
		      at the grid point.


.. c:function:: void calcEU(struct mrc_trafo *trafo, int block, const double xi[3], int d, double eu[3])

   Calculates the normal basis vectors of the simulation space.

   :param struct mrc_trafo* trafo: This trafo.

   :param int block:
      Which block we are setting up. Trafos can have different mappings on each block of a domain.
      The author is responsible for ensuring the mappings are smooth across block boundaries.

   :param const double xi[3]: The simulation coordinates at a grid
			      point.

   :param int d: Which basis vector to calculate (numbered 0-3
		 corresponding to coordinate numbers)

   :param double eu[3]: The normal basis vector calculated by this function.

.. c:function:: void calcEL(struct mrc_trafo *trafo, int block, const double xi[3], int d, double el[3])

   Calculates the tangential basis vectors of the simulation space.

   :param struct mrc_trafo* trafo: This trafo.

   :param int block:
      Which block we are setting up. Trafos can have different mappings on each block of a domain.
      The author is responsible for ensuring the mappings are smooth across block boundaries.

   :param const double xi[3]: The simulation coordinates at a grid
			      point.

   :param int d: Which basis vector to calculate (numbered 0-3
		 corresponding to coordinate numbers)

   :param double el[3]: The tangential basis vector calculated by this function.

.. c:function:: void calcGAM(struct mrc_trafo *trafo, int block, const double xi[3], int i, int k, int l, double *pGam)

   Calculates the Christoffel symbols of the second kind across the simulation space.

   :param struct mrc_trafo* trafo: This trafo.

   :param int block:
      Which block we are setting up. Trafos can have different mappings on each block of a domain.
      The author is responsible for ensuring the mappings are smooth across block boundaries.

   :param const double xi[3]: The simulation coordinates at a grid
			      point.

   :param int i,k,l: Indices :math:`\Gamma^{i}_{kl}`

   :param double* pGam: Output pointer for the given symbol at the grid point.

.. c:member:: char* _block_factory:
   
   The type of the :c:type:`mrc_block_factory` recommended by this
   trafo. If a block factory is *not* set here and the domain is of
   type :c:type:`mrc_domain_mb <"mb">` a block factory must be set in
   the domain before it can be setup.


.. note:: The block factory can be overridden by the user when setting up the
   domain. If the user does so it is their responsibility to insure the trafo and factory are compatible.
