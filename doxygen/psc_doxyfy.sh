#! /bin/bash

########################################################
# psc_doxyfy.sh - A shell script to aid in the doxygen #
# adaption of the PSC source. Run from the directory   #
# 'doxygen' where you found this script. It will check #
# for undocumented elements in the source, and give    #
# the option to open an editor and document the source #
# in a doxygen friendly format.                        #
#                                                      #
# Command line options should not be necesary unless   #
# the doxygen conf file psc_dox.conf is modified.      #
########################################################

PATHTOSRC="../"
WARNCONF_D=""
ERRLOG_D="doxy_err.log"
BUILDCONF_D="psc_dox.conf"

usage="USAGE: psx_doxyfy.sh <options> \n 
 Options are.. \n 
 \t -h \n
 \t \t Print this message and exit\n
 \t -w <doxygen_conf>\n
 \t \t Specify doxygen configure file which checks for\n
 \t \t undocumented members in the source\n
 \t \t DEFAULT: uses ${BUILDCONF_D} with output disabled.\n
 \t -e <doxygen_error_log>\n
 \t \t Specify the log file generated by the doxygen warning\n
 \t \t configuration file. \n
 \t \t DEFAULT: ${ERRLOG_D}\n
 \t -b <doxygen_conf>\n
 \t \t Specify doxygen build file which will be used to\n
 \t \t build the actual documentation, provided that\n
 \t \t undocumented functions do not exist or can be\n
 \t \t resolved\n
 \t \t DEFAULT: ${BUILDCONF_D}"

SEP=":::::::::::"
SEP1="----------"
SEP2="~~~~~~~~~~"
WARNCONF="${WARNCONF_D}"
ERRLOG="${ERRLOG_D}"
BUILDCONF="${BUILDCONF_D}"

FindUntag(){
    echo ""
    echo "Checking for files missing the '\file' tag..."
    echo $SEP1
    CNMATCH=`grep -RL --include=*.c '[\]file' ${PATHTOSRC} | wc -l`
    HNMATCH=`grep -RL --include=*.h '[\]file' ${PATHTOSRC} | wc -l`
    FNMATCH=`grep -RL --include=*.F '[\]file' ${PATHTOSRC} | wc -l`
    NMATCHTOT=$(($CNMATCH+$HNMATCH+$FNMATCH))
    
    CNFILES=`grep -RL --include=*.c '[\]file' ${PATHTOSRC}`
    HNFILES=`grep -RL --include=*.h '[\]file' ${PATHTOSRC}`
    FNFILES=`grep -RL --include=*.F '[\]file' ${PATHTOSRC}`
    
    if [ "$NMATCHTOT" -eq "0" ]
    then
	echo "No files with the '\file' tag found!"
	echo "Somebody has been keeping up on documentation"
    else
	echo "Found ${NMATCHTOT} source files without the '\file' tag!"
	echo -e "\t ${CNMATCH} files with extension *.c"
	echo -e "\t ${HNMATCH} files with extension *.h"
	echo -e "\t ${FNMATCH} files with extension *.F"
	echo $SEP1
	echo "For me to find undocumented functions and globals in these files they need to have a '\file' tag."
	echo "I can append a comment block with the correct tag to these files, but it will only contain the"
	echo "tag, and nothing else."
	echo $SEP1
	while :
	do
	    echo -n "Do you want me to append the tag '\file' to files currently lacking it? [y/n/q]"
	    read line
	    if [ `echo $line | tr [:upper:] [:lower:]` = "y" ]
	    then
		for fix in $CNFILES
		do
		    echo "" >> $fix
		    echo "// Automatically added by psc_doxyfy.sh to conform to doxygen standards" >> $fix
		    echo "// It would be a good idea to fill this in with a real description" >> $fix
		    echo "" >> $fix
		    echo "/// \file ${fix##*/}" >> $fix
		done
		for fix in $HNFILES
		do
		    echo "" >> $fix
		    echo "// Automatically added by psc_doxyfy.sh to conform to doxygen standards" >> $fix
		    echo "// It would be a good idea to fill this in with a real description" >> $fix
		    echo "" >> $fix
		    echo "/// \file ${fix##*/}" >> $fix
		done
		for fix in $FNFILES
		do
		    echo "" >> $fix
		    echo "! Automatically added by psc_doxyfy.sh to conform to doxygen standards" >> $fix
		    echo "! It would be a good idea to fill this in with a real description" >> $fix
		    echo "" >> $fix
		    echo "!> \file ${fix##*/}" >> $fix
		done
		echo $SEP1
		echo "Added tags to files lacking them."
		echo "It would be best to have real descriptions in those files."
		echo $SEP1
		while :
		do
		    echo -n "Do you want me to output a list of files I just fixed so you can improve the comments later? [y/n]" 
		    read line
		    echo $SEP1
		    if [ `echo $line | tr [:upper:] [:lower:]` = "y" ]
		    then
			echo -n "Specify a file to save the list (will be appended), or press enter for stdout:"
			read file
			if [ "$file" = "" ] 
			then
			    echo "# psc_doxyfy.sh automatically added the '\file' tag to the following files"
			    for fname in $FNFILES $HNFILES $CNFILES
			    do
				echo $fname 
			    done
			    break
			else
			    echo "# psc_doxyfy.sh automatically added the '\file' tag to the following files"
			    for fname in $FNFILES $HNFILES $CNFILES
			    do
				echo $fname >> $file
			    done
			    echo "Saved to '$file', continuing."
			    break
			fi
		    elif [ `echo $line | tr [:upper:] [:lower:]` = "n" ]
		    then
			echo "Proceeding without listing files"
			break
		    else
			echo "Unrecognized answer to question"
		    fi
		done
		break
	    elif [ `echo $line | tr [:upper:] [:lower:]` = "n" ]
	    then
		echo $SEP1
		echo "I will not be able to find undocumented functions and globals in files lacking this tag."
		while :
		do
		    echo -n "Do you want me to output a list of files missing the '\file' tag and exit, so you can fix them by hand? [y/n]" 
		    read line
		    echo $SEP1
		    if [ `echo $line | tr [:upper:] [:lower:]` = "y" ]
		    then
			echo -n "Specify a file to save the list (will be appended), or press enter for stdout:"
			read file
			if [ "$file" = "" ] 
			then
			    echo "# Files lacking the '\file' tag"
			    echo "# List created by psc_doxyfy.sh"
			    for fname in $FNFILES $HNFILES $CNFILES
			    do
				echo $fname 
			    done
			    exit
			else
			    echo "# Files lacking the '\file' tag"
			    echo "# List created by psc_doxyfy.sh"
			    for fname in $FNFILES $HNFILES $CNFILES
			    do
				echo $fname >> $file
			    done
			    echo "Saved to '$file', goodbye."
			    exit
			fi
		    elif [ `echo $line | tr [:upper:] [:lower:]` = "n" ]
		    then
			echo "Proceeding with tag unadded"
			break
		    else
			echo "Unrecognized answer to question"
		    fi
		done
		break
	    elif [ `echo $line | tr [:upper:] [:lower:]` = "q" ]
	    then
		exit
	    else
		echo "Unrecognized answer to question"
	    fi
	done
    fi
}

FindUndoc(){ 
    if [ ! -n "${WARNCONF}" ] 
    then
	echo -e "Looking for undocumented elements using build file '${BUILDCONF}', with EXTRACT_ALL and OUTPUT_X disabled, which outputs to log file '${ERRLOG}'."
	cat $BUILDCONF | awk '{if( /^EXTRACT_ALL|^GENERATE_/ ) { sub(/YES/,"NO",$0); print} else { print }}' | doxygen - >> /dev/null
    else  
	echo -e "Looking for undocumented elements using configuration '${WARNCONF}' which outputs to log file '${ERRLOG}'."
	doxygen "${WARNCONF}"
    fi
    echo $SEP1
	
    if [ ! -e "${ERRLOG}" ]
    then
	echo "[fail] error log '${ERRLOG}' was not created by config file!"
	echo "[helpful] log files present in this directory:"
	echo ""
	ls *.log
	echo ""
	echo "[polite] Please check settings and try again"
	exit 1
    fi
    
    NWARN=`grep -c "Warning" ${ERRLOG}`
    NNDOC=`grep -c "not documented" ${ERRLOG}`
    
    echo "Number of warnings: ${NWARN}"
    echo "Number of undocumented: ${NNDOC}"
    
    NCOMP=`grep -c "Compound" ${ERRLOG}`
    NMEM=`grep -c "Member" ${ERRLOG}`
    NFUNC=`grep "Member" ${ERRLOG} |grep -c "(function)"`
    NVAR=`grep "Member" ${ERRLOG} |grep -c "(variable)"`
    
    echo -e "\t Compounds: ${NCOMP}"
    echo -e "\t Members: ${NMEM}"
    echo -e "\t \t functions: ${NFUNC}"
    echo -e "\t \t variables: ${NVAR}" 
    echo $SEP1
    nundocfiles=`awk -F: 'BEGIN{ORS=" "}{ if(!($1 in a)){a[$1];print $1}}' < ${ERRLOG} | wc -w`
    nundocC=`awk -F: 'BEGIN{ORS=" "}$1 ~ /\.c/ { if(!($1 in a)){a[$1];print $1}}' < ${ERRLOG} | wc -w`
    nundocH=`awk -F: 'BEGIN{ORS=" "}$1 ~ /\.h/ { if(!($1 in a)){a[$1];print $1}}' < ${ERRLOG} | wc -w`
    nundocF=`awk -F: 'BEGIN{ORS=" "}$1 ~ /\.F/{ if(!($1 in a)){a[$1];print $1}}' < ${ERRLOG} | wc -w`
    echo "There are $nundocfiles files with undocumented elements"
    echo -e "\t $nundocC files with extension *.c"
    echo -e "\t $nundocH files with extension *.h"
    echo -e "\t $nundocF files with extension *.F"
    undocC=`awk -F: ' BEGIN{ORS=" "}$1 ~ /\.c/{ if(!($1 in a)){a[$1];print $1}}' < ${ERRLOG}`
    undocH=`awk -F: ' BEGIN{ORS=" "}$1 ~ /\.h/{ if(!($1 in a)){a[$1];print $1}}' < ${ERRLOG}`
    undocF=`awk -F: ' BEGIN{ORS=" "}$1 ~ /\.F/{ if(!($1 in a)){a[$1];print $1}}' < ${ERRLOG}`
}

BuildDoc()
{
    while :
    do
	echo -n "Would you like to build the documentation? [y,n]"
	read line
	if [ `echo $line | tr [:upper:] [:lower:]` = "y" ] 
	then
	    doxygen ${BUILDCONF}
	    echo $SEP1 
	    nerr=`cat ${ERRLOG} | wc -l`
	    if [ "$nerr" -eq "0" ] 
	    then
		echo "'doxygen ${BUILDCONF}' exited with no errors !"
		exit
	    else
		echo "'doxygen ${BUILDCONF}' exit with ${nerr} errors"
		echo " errlog : ${ERRLOG}"
		cat ${ERRLOG}
		exit
	    fi
	elif [ `echo $line | tr [:upper:] [:lower:]` = "n" ]
	    then 
	    echo $SEP1
	    echo "Exiting without building documentation"
	    exit
	else
	    echo "Unrecognized answer '$line'"
	fi
    done
}

function EditFiles {
    editor="emacs"
    if which emacs
    then 
	editor="emacs -nw"
	macsy="yes"
    elif which xemacs
	then
	editor="xemacs -nw"
	macsy="yes"
    else
      echo "Couldn't find emacs or xemacs. Will spawn xterm with alternate editor."
      while ! which ${editor}
      do
	  echo "Editor ${editor} is not found!"
	  echo "Please specify an alternate editor"
	  echo -n "editor: "
	  read editor
      done
      macsy="no"
    fi
    for file in $1
    do
	echo $SEP1
	echo "File $file has `grep -c ${file} ${ERRLOG}` warnings:"
	echo $SEP2
	TMP=$(mktemp)
	grep ${file} ${ERRLOG} | sort -nt ":" -k2 | tee ${TMP}
	echo $SEP2
	nfixme=`grep -c "[ /]FIXME" ${file}`
	if [ ! "${nfixme}" -eq "0" ]
	then
	    echo "I have also detected `grep -c "[ /c!]FIXME" ${file}` FIXMEs which will not be converted to todos"
	    echo "Please consider elaborating on the following FIXMEs, enclosing them in a doxygen comment block"
	    echo "and adding the tag prefix (FIXME->\FIXME) so they will show up in the generated documentation"
	    echo $SEP2
	    grep -n "[ /c!]FIXME" ${file} | tee -a ${TMP}
	    echo $SEP2
	fi 
	echo "Press <enter> to edit $file or 's' to skip"
	read -s -n1 keypress
	if [ `echo ${keypress} | tr [:upper:] [:lower:]` = "s" ]
	then
	    echo "Skipping ${file}"
	else
	    if [ "${macsy}" == "yes" ]
	    then
		${editor} ${TMP} ${file}
	    else
		xterm -e ${editor} ${file}
	    fi
	fi
	rm ${TMP}
    done
}

echo $SEP
echo ""
echo "If all goes well, I will build documentation with configuration '${BUILDCONF}.'" 
echo ""
echo $SEP

while getopts ":w:e:b:h" Option
do
    case $Option in
	w)  WARNCONF=${OPTARG}
	    if [ ! -e "${WARNCONF}" ]
	    then
		echo "[doh!] Warning config file ${WARNCONF} does not exist!"
		exit 1
	    fi
	    ;;
	e) ERRLOG=${OPTARG}
	    ;;
	b) BUILDCONF=${OPTARG}
	    ;;
	h) 
	    echo -e ${usage} 
	    exit
	    ;;
	*) 
	    echo >&2 "Unrecognized option ${OPTION}" 
	    echo -r ${usage}
	    exit
	    ;;
	
    esac
done

shift $(($OPTIND - 1))

if [ ! -e "${BUILDCONF}" ]
then
    echo "[doh!] Build config file ${BUILDCONF} does not exist!"
    exit 1
fi

if [ -e "${ERRLOG}" ]
then
    rm ${ERRLOG}
fi

FindUntag
echo
echo $SEP
echo
FindUndoc
echo 
echo $SEP
echo
if [ "$nundocfiles" -eq "0" ]
then
    BuildDoc
fi
while :
do
    echo -n "Would you like to edit the *.c files with undocumented members? [y/n]"
    read line
    echo $SEP1
    if [ `echo $line | tr [:upper:] [:lower:]` = "y" ] 
    then
	EditFiles "${undocC}"
	break
    elif [ `echo $line | tr [:upper:] [:lower:]` = "n" ]
    then 
	echo "Skipping *.c files"
	break
    else
	echo "Unrecognized answer '$line'"
    fi
done
echo $SEP1
while :
do
    echo -n "Would you like to edit the *.h files with undocumented elements? [y/n]"
    read line
    echo $SEP1
    if [ `echo $line | tr [:upper:] [:lower:]` = "y" ] 
    then
	EditFiles "${undocH}"
	break
    elif [ `echo $line | tr [:upper:] [:lower:]` = "n" ]
    then 
	echo "Skipping *.h files"
	break
    else
	echo "Unrecognized answer '$line'"
    fi
done
echo $SEP1
while :
do
    echo -n "Would you like to edit the *.F files with undocumented members? [y/n]"
    read line
    echo $SEP1
    if [ `echo $line | tr [:upper:] [:lower:]` = "y" ] 
    then
	EditFiles "${undocF}"
	break
    elif [ `echo $line | tr [:upper:] [:lower:]` = "n" ]
    then 
	echo "Skipping *.F files"
	break
    else
	echo "Unrecognized answer '$line'"
    fi
done

echo
echo $SEP
echo
echo "Rechecking files.."
FindUndoc
echo 
echo $SEP
echo
BuildDoc